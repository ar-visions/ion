dep(ion:media ion:vkh ion:glutess harfbuzz freetype2 bz2)

includes(${INSTALL_PREFIX}/include/freetype2)

# perhaps if we have a @ infront they can become options; or, options() can also define but serve as a pass-through for defaults
# options could not be read from different modules, though.  thats bad news anyway
defines(VKVG_USE_GLUTESS
		DEBUG
        VKSVG_SVG
        VKVG_FILL_NZ_GLUTESS
        VKVG_PREMULT_ALPHA
        VKVG_USE_FREETYPE
        VKVG_USE_HARFBUZZ
       -VKVG_WIRED_DEBUG
       -VKVG_ENABLE_VK_SCALAR_BLOCK_LAYOUT
       -VKVG_USE_RENDERDOC)

# unselect if its there, already having being built
src(-shaders.h)
cflags(+-Wno-c++11-narrowing +-Wno-switch +-Wno-format)

# -----------------------------------------------
# -------------- shader generation --------------
# -----------------------------------------------

# Find glslc shader compiler.
# On Android, the NDK includes the binary, so no external dependency.
IF(ANDROID)
	FILE(GLOB glslc-folders ${ANDROID_NDK}/shader-tools/*)
ELSE()
	FILE(GLOB glslc-folders ${VULKAN_SDK}/bin)
ENDIF()

FIND_PROGRAM(GLSLC glslc HINTS ${glslc-folders})
FIND_PROGRAM(XXD xxd)

# compile the shaders
if(GLSLC AND XXD)
	set(SHADERS_H "${module_path}/shaders.h")
	set(SHADER_DIR "res/shaders")
	set(SHADER_FILES ${SHADER_DIR}/*.frag ${SHADER_DIR}/*.vert ${SHADER_DIR}/*.geom  ${SHADER_DIR}/*.comp)
	FILE(GLOB_RECURSE SHADERS RELATIVE ${module_path} ${SHADER_FILES})
	FOREACH(SHADER ${SHADERS})
		set(shader-input ${module_path}/${SHADER})
		set(shader-output ${CMAKE_CURRENT_BINARY_DIR}/${SHADER_DIR}/${SHADER}.spv)
		ADD_CUSTOM_COMMAND (
		  OUTPUT ${shader-output}
		  COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_CURRENT_BINARY_DIR}/${SHADER_DIR}"
		  COMMAND ${GLSLC} ${GLSLDEFS} ${shader-input} -o ${shader-output} --target-env=vulkan1.2
		  COMMENT "Compiling ${shader-input}"
		  DEPENDS ${SHADER}
		  VERBATIM
		)
		set(SHADER_OUTPUTS ${SHADER_OUTPUTS} ${shader-output})
	ENDFOREACH()

	ADD_CUSTOM_TARGET(BuildShaders ALL DEPENDS ${SHADER_OUTPUTS})

    ADD_CUSTOM_TARGET(ClearShadersHeader
        COMMAND ${CMAKE_COMMAND} -E rm -f ${SHADERS_H})

	ADD_CUSTOM_TARGET(BuildShadersHeader
		DEPENDS ClearShadersHeader ${SHADER_OUTPUTS})

	FOREACH(shad_spv ${SHADER_OUTPUTS})
		GET_FILENAME_COMPONENT(SPV ${shad_spv} NAME)
		ADD_CUSTOM_COMMAND (
			TARGET BuildShadersHeader
			WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${SHADER_DIR}
			COMMAND ${XXD} -i ${SPV} >> ${SHADERS_H})
    
	ENDFOREACH()
	SET_SOURCE_FILES_PROPERTIES(${SHADERS_H} PROPERTIES GENERATED 1)
	#add_definitions( -DDEBUG_VK_PERF=true )
ENDIF()
