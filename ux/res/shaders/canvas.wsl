struct vary {
    @builtin(position) pos : vec4f,
    @location(0)       uv  : vec2f,
    @location(1)       color : vec4f
};

struct ustate {
    x_scale : f32,
    y_scale : f32
};

@group(0) @binding(0) var s0 : sampler;
@group(0) @binding(1) var t0 : texture_2d<f32>;
@group(0) @binding(2) var<uniform> u : ustate;
@group(0) @binding(3) var<storage> test_storage : array<f32>;

struct attribs {
    @location(0) pos1     : vec4f,
    @location(1) uv       : vec2f
};

/// shared vertex
fn _vertex_main(a : attribs) -> vary {
    var v : vary;
    v.pos = vec4f(a.pos1.x * u.x_scale * test_storage[0], a.pos1.y * u.y_scale * test_storage[1], a.pos1.z, a.pos1.w);
    v.uv  = a.uv;
    return v;
}

@vertex
fn vertex_main(a : attribs) -> vary {
    return _vertex_main(a);
}

@vertex
fn vertex_wire(a : attribs) -> vary {
    return _vertex_main(a);
}

/// shared fragment
fn _fragment_main(v : vary) -> vec4f {
    return textureSample(t0, s0, v.uv);
}

@fragment
fn fragment_main(v : vary) -> @location(0) vec4f {
    return _fragment_main(v);
}

@fragment
fn fragment_wire(v : vary) -> @location(0) vec4f {
    return mix(_fragment_main(v), vec4f(1.0f, 1.0f, 0.0f, 1.0f), 0.5f);
}