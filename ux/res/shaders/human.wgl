struct vary {
    @builtin(position) gl_Position : vec4f,
    @location(0)       uv0         : vec2f,
    @location(1)       color       : vec4f
};

struct light {
    pos   : vec4f,
    color : vec4f
};

struct ustate {
    model  : mat4x4f,
    view   : mat4x4f,
    proj   : mat4x4f,
    eye    : vec4f,
    lights : array<light, 4>,
    light_count : u32
};

@group(0) @binding(0)  var<uniform> u      : ustate;
@group(0) @binding(1)  var<storage, read> joints : array<mat4x4f>;

/*
@group(0) @binding(2)  var color          : texture_2d<f32>;
@group(0) @binding(3)  var color_sa       : sampler;
@group(0) @binding(4)  var normal         : texture_2d<f32>;
@group(0) @binding(5)  var normal_sa      : sampler;
@group(0) @binding(6)  var material       : texture_2d<f32>;
@group(0) @binding(7)  var material_sa    : sampler;
@group(0) @binding(8)  var reflect        : texture_2d<f32>;
@group(0) @binding(9)  var reflect_sa     : sampler;
@group(0) @binding(10) var env            : texture_2d<f32>;
@group(0) @binding(11) var env_sa         : sampler;
*/

struct attribs {
    @location(0) pos      : vec3f,
    @location(1) normal   : vec3f,
    @location(2) uv0      : vec2f,
    @location(3) uv1      : vec2f,
    @location(4) tangent  : vec4f,
    @location(5) joints0  : vec4<f32>,
    @location(6) joints1  : vec4<f32>,
    @location(7) weights0 : vec4<f32>,
    @location(8) weights1 : vec4<f32>
};

/// floating joints; when sub dividing we end up getting interpolated indices
/// this is only valid between neighboring joints
/// when building the sub div we would perform a left-hand selection if there is a case of index distance > 1
/// we can also solve by duplicating joint data and putting neighbors together; this may end up populating too much data
/// we may also need to re-order to best fit alignment of interpolative values

fn floating_joint(i: u32, joint_index: vec4<f32>) -> mat4x4f {
    let jf = joint_index[i]; // floaty joint-index
    let joint = mix(
        joints[ floor(jf)],
        joints[  ceil(jf)],
            jf - floor(jf));
    return joint;
}

fn _vertex(a : attribs, offset: f32) -> vary {
    var v : vary;
    let pos4 = vec4f(a.pos + a.normal * offset, 1.0f);
    var skin_pos : vec4f = vec4f(0.0f);
    for (var i:u32 = 0u; i < 4u; i += 1u) {
        let joint = floating_joint(i, a.joints0);
        skin_pos = skin_pos + joint * a.weights0[i] * pos4;
    }
    for (var i:u32 = 0u; i < 4u; i += 1u) {
        let joint = floating_joint(i, a.joints1);
        skin_pos = skin_pos + joint * a.weights1[i] * pos4;
    }
    let model_pos = u.model * skin_pos;
    let world_pos = u.view * model_pos;
    let  clip_pos = u.proj * world_pos;

    var light = vec3f(0.0f);
    for (var i:u32 = 0u; i < u.light_count; i += 1u) {
        let light_dir = normalize(u.lights[i].pos.xyz - model_pos.xyz);
        let amount = max(dot(a.normal, light_dir), 0.0);
        light += amount * vec3f(1.0f);
    }

    v.gl_Position = clip_pos;
    v.color       = vec4f(light, 1.0f);
    v.uv0         = a.uv0;
    return v;
}

@vertex
fn vertex_main(a : attribs) -> vary {
    return _vertex(a, 0.0f);
}

@vertex
fn vertex_wire(a : attribs) -> vary {
    return _vertex(a, 0.001f);
}

fn _fragment(v : vary) -> vec4f {
    //let color = textureSample(color, color_sa, v.uv0);
    return v.color;
}

@fragment
fn fragment_main(v : vary) -> @location(0) vec4f {
    return _fragment(v);
}

@fragment
fn fragment_wire(v : vary) -> @location(0) vec4f {
    return mix(_fragment(v), vec4f(1.0f, 1.0f, 0.0f, 1.0f), 0.66f);
}